//Easy
package com.mycompany.easy1;

import java.util.*;
public class Easy1 {
     public int lengthOfLastWord(String s) {
        int length=0;
        int j=0;
        for(int i=s.length()-1;i>=0;i--)
        {
            if(s.charAt(s.length()-1-j)==' ')
            {
                j++;
                continue;
            }
            else{

            
            if(s.charAt(i)!=' ')
            {
                length++;
               
            }
             else
            {
                break;
            }
            }
           
        }
        return length;      
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a string: ");
        String input = scanner.nextLine();

        Easy1 easy1 = new Easy1();
        int result = easy1.lengthOfLastWord(input);
        System.out.println("Length of the last word: " + result);

        scanner.close();
      
   
}
    }

1.Initialize Variables:
Set length to 0 (to count the length of the last word).
Set j to 0 (to handle trailing spaces).

2.Loop from the End of the String:
Start from the last character of the string and move towards the beginning.
If the current character is a space at the end, skip it and move to the next character.
If it's not a space:
If it's not a space at the current position, increase the length counter.
If it is a space, break out of the loop.

3.Return the Result:
Return the final value of the length counter, which represents the length of the last word.


//Medium
package com.mycompany.medium1;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Medium1 {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> result = new ArrayList<>();

        if (nums == null || nums.length == 0) {
            return result;
        }

        Arrays.sort(nums);
        int count1 = 1, count2 = 0, candidate1 = nums[0], candidate2 = Integer.MAX_VALUE;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == candidate1) {
                count1++;
            } else if (nums[i] == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = nums[i];
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = nums[i];
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }

        // Reset counters for actual counting
        count1 = 0;
        count2 = 0;

        // Count occurrences of potential candidates
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            }
        }

        // Check if candidates appear more than n/3 times
        if (count1 > nums.length / 3) {
            result.add(candidate1);
        }
        if (count2 > nums.length / 3) {
            result.add(candidate2);
        }

        return result;
    }

    public static void main(String[] args) {
        Medium1 medium = new Medium1();
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the size of the array: ");
        int n = scanner.nextInt();

        int[] nums = new int[n];
        System.out.println("Enter the elements of the array:");
        for (int i = 0; i < n; i++) {
            nums[i] = scanner.nextInt();
        }

        List<Integer> result = medium.majorityElement(nums);

        System.out.println("Elements appearing more than [n/3] times: " + result);
    }
}

1.Initialize Variables:
Set up a list called result to store the majority elements.
If the input array (nums) is empty, return the empty result list.

2.Sort the Array:
Sort the array nums in ascending order. This helps in identifying potential majority elements efficiently.

3.Find Potential Candidates:
Initialize counters (count1 and count2) and potential candidates (candidate1 and candidate2).
Iterate through the sorted array, updating counters and candidates based on certain conditions.
The goal is to identify up to two potential majority candidates.

4.Reset Counters for Actual Counting:
Reset counters (count1 and count2) for actual counting of occurrences.

5.Count Occurrences of Potential Candidates:
Iterate through the original array to count the occurrences of the potential candidates.

6.Check for Majority Elements:
Check if the occurrences of the potential candidates are more than n/3, where n is the size of the array.
If yes, add the candidates to the result list.

7.Return the Result:
Return the list of majority elements found in the array.

//Hard
package com.mycompany.hard1;

import java.util.Scanner;
public class Hard1 {
    public String shortestPalindrome(String s) {
        int n = s.length();
        String rev = new StringBuilder(s).reverse().toString();

        for (int i = 0; i < n; i++) {
            if (s.substring(0, n - i).equals(rev.substring(i))) {
                return rev.substring(0, i) + s;
            }
        }

        return ""; // This should not happen given the constraints.
    }

    public static void main(String[] args) {
        Hard1 solution = new Hard1();
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the string: ");
        String input = scanner.nextLine();

        String result = solution.shortestPalindrome(input);

        System.out.println("Shortest Palindrome: " + result);
    }
}

1.Initialize Variables:
Get the length (n) of the input string (s).
Create a reversed version (rev) of the input string.

2.Finding the Shortest Palindrome:
Start a loop from the beginning of the reversed string.
For each iteration, check if a substring of the original string matches the suffix of the reversed string.
If a match is found, return a combination of the reversed suffix and the original string.

3.Return Empty String (Should Not Happen):
If the loop completes without finding a match, return an empty string. This should not happen given the constraints.

4.Main Method:
Create an instance of the Hard1 class.
Use a Scanner to get user input for a string.
Call the shortestPalindrome method on the input string.
Print the result, which is the shortest palindrome.

    

